#! / Bin / bash
# OpenVPN instalador para Debian, Ubuntu e CentOS

# Esse script vai trabalhar no Debian, Ubuntu, CentOS e outras distribuições de outras famílias, embora nenhum suporte é oferecido para eles.
# Mas vai funcionar se você simplesmente prefere configurar uma VPN não 
# Seu Debian / Ubuntu / CentOS. Ele foi projetado para ser tão
# Discreto e universal quanto possível.



# Detectar usuários do Debian executando o script com "sh" em vez de bash
Se readlink / proc / $$ / exe | Grep -qs "traço"; então
	Echo "Este script precisa ser executado com bash, não sh"
	Saída 1
Fi

Se [["$ EUID" -ne 0]]; então
	Echo "Desculpe, você precisa executar isso como root"
	Saída 2
Fi

E se [[ ! -e / dev / net / tun]]; então
	Echo "TUN não está disponível"
	Saída 3
Fi

Se grep -qs "CentOS versão 5" "/ etc / redhat-release"; então
	Echo "CentOS 5 é muito antigo e não é suportado"
	Saída 4
Fi
Se [[-e / etc / debian_version]]; então
	OS = debian
	GROUPNAME = nogroup
	RCLOCAL = '/ etc / rc.local'
Elif [[-e / etc / centos-release || -e / etc / redhat-release]]; então
	OS = centos
	GROUPNAME = nobody
	RCLOCAL = '/ etc / rc.d / rc.local'
outro
	Echo "Parece que você não está executando este instalador em um sistema Debian, Ubuntu ou CentOS"
	Saída 5
Fi

novo cliente () {
	# Gera o cliente custom.ovpn
	Cp /etc/openvpn/client-common.txt ~ / $ 1.ovpn
	Echo "<ca>" >> ~ / $ 1.ovpn
	Cat /etc/openvpn/easy-rsa/pki/ca.crt >> ~ / $ 1.ovpn
	Echo "</ ca>" >> ~ / $ 1.ovpn
	Echo "<cert>" >> ~ / $ 1.ovpn
	Cat /etc/openvpn/easy-rsa/pki/issued/$1.crt >> ~ / $ 1.ovpn
	Echo "</ cert>" >> ~ / $ 1.ovpn
	Echo "<key>" >> ~ / $ 1.ovpn
	Cat /etc/openvpn/easy-rsa/pki/private/$1.key >> ~ / $ 1.ovpn
	Echo "</ key>" >> ~ / $ 1.ovpn
	Echo "<tls-auth>" >> ~ / $ 1.ovpn
	Cat /etc/openvpn/ta.key >> ~ / $ 1.ovpn
	Echo "</ tls-auth>" >> ~ / $ 1.ovpn
}

# Tente obter o nosso IP do sistema e voltar para a Internet.
# Eu faço isso para tornar o script compatível com servidores NATed (lowendspirit.com)
# E para evitar a obtenção de um IPv6.
IP = $ (ip addr | grep 'inet' | grep -v inet6 | grep -vE '127 \. [0-9] {1,3} \. [0-9] {1,3} -9] {1,3} '| grep -o -E' [0-9] {1,3} \. [0-9] {1,3} \. [0-9] {1,3} \. [0-9] {1,3} '| cabeça -1)
Se [["$ IP" = ""]]; então
		IP = $ (wget -4qO- "http://whatismyip.akamai.com/")
Fi

Se [[-e /etc/openvpn/server.conf]]; então
	enquanto :
	Faz
	Claro
		Echo "OpenVPN já está instalado"
		Eco
		Echo "O que você já fez?"
		No total.
		Eo-e-ku-ko-eo-eo-e-co-
		Echo "3) Remover OpenVPN"
		Echo "4) Sair"
		Read -p "Selecione uma opção [1-4]:" opção
		Case $ option em
			1) 
			Eco
			Echo "Diga-me um nome para o usuário"
			Echo "Usar apenas o nome sem caráter especial"
			Read -p "Nome do cliente:" -e -i client CLIENT
			Cd / etc / openvpn / easy-rsa /
			./easyrsa build-client-full $ CLIENTE nopass
			# Gera o cliente custom.ovpn
			Newclient "$ CLIENT"
			Eco
			Echo "Client $ CLIENT added, a configuração está disponível em" ~ / "$ CLIENT.ovpn"
			Saída
			;;
			2)
			# Esta opção pode ser documentada um pouco melhor e talvez até mesmo simplimplified
			# ... mas o que posso dizer, eu quero dormir um pouco
			NUMBEROFCLIENTS = $ (tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep -c "^ V")
			Se [["$ NUMBEROFCLIENTS" = '0']]; então
				Eco
				Echo "Você não tem usuários existentes!"
				Saída 6
			Fi
			Eco
			Echo "Selecione um usuário para remover"
			Tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | Grep "^ V" | Cut -d '=' -f 2 | Nl-s ')'
			Se [["$ NUMBEROFCLIENTS" = '1']]; então
				Read -p "Selecione um utilizador [1]:" CLIENTNUMBER
			outro
				Read -p "Selecione um usuário [1- $ NUMBEROFCLIENTS]:" CLIENTNUMBER
			Fi
			CLIENT = $ (tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^ V" | cut -d '=' -f 2 | sed -n "$ CLIENTNUMBER" p)
			Cd / etc / openvpn / easy-rsa /
			./easyrsa - remessa de lote $ CLIENT
			. / Easyrsa gen-crl
			Rm -rf pki / reqs / $ CLIENT.req
			Rm -rf pki / private / $ CLIENT.key
			Rm -rf pki / issued / $ CLIENT.crt
			Rm -rf /etc/openvpn/crl.pem
			Cp /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn/crl.pem
			# CRL é lido com cada conexão de cliente, quando OpenVPN é descartado para ninguém
			Chown nobody: $ GROUPNAME /etc/openvpn/crl.pem
			Eco
			Echo "Usuário removido"
			Saída
			;;
			3) 
			Eco
			Read -p "Você remove removedor OpenVPN? [Y / n]:" -e -in REMOVE
			Se [["$ REMOVE" = 'y']]; então
				PORT = $ (grep '^ port' /etc/openvpn/server.conf | cut -d "" -f 2)
				PROTOCOL = $ (grep '^ proto' /etc/openvpn/server.conf | cut -d "" -f 2)
				IP = $ (grep 'iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to' $ RCLOCAL | cut -d "-f 11)
				Se pgrep firewalld; então
					# Usando regras permanentes e não permanentes para evitar uma recarga firewalld.
					Firewall-cmd --zone = public --remove-port = $ PORT / $ PROTOCOL
					Firewall-cmd --zone = confiável --remove-source = 10.8.0.0 / 24
					Firewall-cmd --permanente --zone = public --remove-port = $ PORT / $ PROTOCOL
					Firewall-cmd --permanente --zone = confiável --remove-source = 10.8.0.0 / 24
				Fi
				Se iptables -L -n | Grep -qE 'REJECT | DROP | ACCEPT'; então
					Iptables -D INPUT -p $ PROTOCOL --dport $ PORT -j ACEITA
					Iptables -D FORWARD -s 10.8.0.0/24 -j ACCEPT
					Iptables -D FORWARD -m state --state RELATED, ESTABLISHED -j ACCEPT
					Sed -i "/ iptables -I INPUT -p $ PROTOCOL --dport $ PORT -j ACCEPT / d" $ RCLOCAL
					Sed -i "/ iptables -I FORWARD -s 10.8.0.0 \ / 24 -j ACCEPT / d" $ RCLOCAL
					Sed -i "/ iptables -I FORWARD -m state --state RELATED, ESTABLISHED -j ACCEPT / d" $ RCLOCAL
				Fi
				Iptables -t nat -D POSTROUTING -s 10.8.0.0/24 -j SNAT --para $ IP
				Sed -i '/ iptables -t nat -A POSTROUTING -s 10.8.0.0 \ / 24 -j SNAT --to / d' $ RCLOCAL
				Se hash sestatus 2> / dev / null; então
					Se sestatus | Grep "Modo atual" | Grep -qs "imposição"; então
						Se [["$ PORT"! = '1194' || "$ PROTOCOL" = 'tcp']]; então
							Semanage port -d -t openvpn_port_t -p $ PROTOCOL $ PORT
						Fi
					Fi
				Fi
				Se [["$ OS" = 'debian']]; então
					Apt-get remove --purge -y openvpn openvpn-blacklist
				outro
					Yum remover openvpn -y
				Fi
				Rm -rf / etc / openvpn
				Rm -rf / usr / share / doc / openvpn *
				Eco
				Echo "OpenVPN removido!"
			outro
				Eco
				Echo "Remoção abordada!"
			Fi
			Saída
			;;
			4) saída ;;
		Esac
	feito
outro
	Claro
	Echo 'Bem vindo ao instalador OpenVPN "Henrick00" installer'
	Eco
	# OpenVPN instalador e criação do primeiro usuário
	Echo "Responda as perguntas para iniciar uma instalação"
	Echo "Responda corretamente"
	Eco
	Echo "Primeiro dado a sua maquina, este ip está correto?"
	Eco "ouvir".
	Read -p "Endereço IP:" -e -i $ IP IP
	Eco
	Echo "Qual o seu protocolo para conexões OPENVPN?"
	Echo "1) UDP"
	Echo "2) TCP (Recomendado)"
	Read -p "Protocolo [1-2]:" -e -i 2 PROTOCOL
	$ PROTOCOL em
		1) 
		PROTOCOL = udp
		;;
		2) 
		PROTOCOL = tcp
		;;
	Esac
	Eco
	Echo "Qual porta você deve usar?"
	Read -p "Porta:" -e -i 8090 PORT
	Eco
	Echo "Qual DNS você pode usar?"
	Echo "1) Sistema (Recomendado)"
	Echo "2) Google"
	Echo "3) OpenDNS"
	Eco "4) NTT"
	Echo "5) Furacão Elétrico"
	Echo "6) Verisign"
	Read -p "DNS [1-6]:" -e -i 1 DNS
	Eco
	Echo "Agora, digite o nome do seu primeiro usuário"
	Echo "Use somente o nome, sem caracteres especiais"
	Read -p "Nome do cliente:" -e -i client CLIENT
	Eco
	Echo "Ok, você está pronto para executar o openvpn"
	Read -n1 -r -p "Pressione uma tecla para continuar ..."
	Se [["$ OS" = 'debian']]; então
		Apt-get upgrade
		Apt-get install openvpn iptables openssl ca-certificados -y
	outro
		# Por outro lado, a distro é CentOS
		Yum install epel-release -y
		Yum instalar openvpn iptables openssl wget ca-certificados -y
	Fi
	# Uma versão antiga do easy-rsa estava disponível por padrão em alguns pacotes openvpn
	Se [[-d / etc / openvpn / easy-rsa /]]; então
		Rm -rf / etc / openvpn / easy-rsa /
	Fi
	# Adquirindo easy-rsa
	Wget -O ~ / EasyRSA-3.0.1.tgz "https://github.com/OpenVPN/easy-rsa/releases/download/3.0.1/EasyRSA-3.0.1.tgz"
	Tar xzf ~ / EasyRSA-3.0.1.tgz -C ~ /
	Mv ~ / EasyRSA-3.0.1 / / / etc / openvpn /
	Mv /etc/openvpn/EasyRSA-3.0.1/ / etc / openvpn / easy-rsa /
	Chown -R raiz: root / etc / openvpn / easy-rsa /
	Rm -rf ~ / EasyRSA-3.0.1.tgz
	Cd / etc / openvpn / easy-rsa /
	# Crie a PKI, configure a CA, os parâmetros DH e os certificados de servidor + cliente
	./easyrsa init-pki
	./easyrsa --batch build-ca nopass
	./easyrsa gen-dh
	./easyrsa build-server-full server nopass
	./easyrsa build-client-full $ CLIENTE nopass
	. / Easyrsa gen-crl
	# Mover o material que precisamos
	Cp pki / ca.crt pki / private / ca.key pki / dh.pem pki / emitido / server.crt pki / private / server.key /etc/openvpn/easy-rsa/pki/crl.pem / etc / openvpn
	# CRL é lido com cada conexão de cliente, quando OpenVPN é descartado para ninguém
	Chown nobody: $ GROUPNAME /etc/openvpn/crl.pem
	# Chave Generando para tls-auth
	Openvpn --genkey --secret /etc/openvpn/ta.key
	# Generando server.conf
	Echo "port $ PORT
Proto $ PROTOCOL
Dev tun
Sndbuf 0
Rcvbuf 0
Ca ca.crt
Cert server.crt
Chave server.key
Dh dh.pem
Tls-auth ta.key 0
Sub-rede de topologia
Server 10.8.0.0 255.255.255.0
Ifconfig-pool-persist ipp.txt "> /etc/openvpn/server.conf
	Echo 'push' redirecionamento-gateway def1 bypass-dhcp '' >> /etc/openvpn/server.conf
	DNS
	$ DNS em
		1) 
		# Obter os resolvers de resolv.conf e usá-los para OpenVPN
		Grep -v '#' /etc/resolv.conf | Grep 'nameserver' | Grep -E -o '[0-9] {1,3} \. [0-9] {1,3} \. [0-9] {1,3} \. [0-9] {1, 3} '| Enquanto linha de leitura; Faz
			Echo "push \" dhcp-opção DNS $ linha \ "" >> /etc/openvpn/server.conf
		feito
		;;
		2) 
		Echo 'push' dhcp-option DNS 8.8.8.8 '' >> /etc/openvpn/server.conf
		Echo 'push' dhcp-option DNS 8.8.4.4 '' >> /etc/openvpn/server.conf
		;;
		3)
		Echo 'push' dhcp-option DNS 208.67.222.222 '' >> /etc/openvpn/server.conf
		Echo 'push' dhcp-option DNS 208.67.220.220 '' >> /etc/openvpn/server.conf
		;;
		4) 
		Echo 'push' dhcp-option DNS 129.250.35.250 '' >> /etc/openvpn/server.conf
		Echo 'push' dhcp-option DNS 129.250.35.251 '' >> /etc/openvpn/server.conf
		;;
		5) 
		Echo 'push' dhcp-option DNS 74.82.42.42 '' >> /etc/openvpn/server.conf
		;;
		6) 
		Echo 'push' dhcp-option DNS 64.6.64.6 '' >> /etc/openvpn/server.conf
		Echo 'push' dhcp-option DNS 64.6.65.6 '' >> /etc/openvpn/server.conf
		;;
	Esac
	Echo "keepalive 10 120
Cifra AES-256-CBC
Comp-lzo
Usuário ninguém
Grupo $ GROUPNAME
Tecla de persistência
Persist-tun
Status openvpn-status.log
Verbo 3
Crl-verify crl.pem ">> /etc/openvpn/server.conf
	# Ativar net.ipv4.ip_forward para o sistema
	Sed -i '/\<net.ipv4.ip_forward\>/c\net.ipv4.ip_forward=1' /etc/sysctl.conf
	E se ! Grep -q "\ <net.ipv4.ip_forward \>" /etc/sysctl.conf; então
		Echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf
	Fi
	# Evitar uma reinicialização desnecessária
	Echo 1> / proc / sys / net / ipv4 / ip_forward
	# Necessário para usar rc.local com algumas distribuições systemd
	Se [["$ OS" = 'debian' &&! -e $ RCLOCAL]]; então
		Echo '#! / Bin / sh -e
Saída 0 '> $ RCLOCAL
	Fi
	Chmod + x $ RCLOCAL
	# Definir NAT para a sub-rede VPN
	Iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --para $ IP
	Sed -i "1 a \ iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --para $ IP" $ RCLOCAL
	Se pgrep firewalld; então
		# Nós não usamos --add-service = openvpn porque isso só funcionaria com
		# A porta eo protocolo padrão. Usando permanentes e não permanentes
		# Regras para evitar um firewalld recarregar.
		Firewall-cmd --zone = public --add-port = $ PORT / $ PROTOCOL
		Firewall-cmd --zone = confiável --add-source = 10.8.0.0 / 24
		Firewall-cmd --permanente --zone = public --add-port = $ PORT / $ PROTOCOL
		Firewall-cmd --permanente --zone = confiável --add-source = 10.8.0.0 / 24
	Fi
	Se iptables -L -n | Grep -qE 'REJECT | DROP'; então
		# Se iptables tem pelo menos uma regra REJECT, nós tomamos isso é necessário.
		# Não é a melhor abordagem, mas não consigo pensar em outros e isso não deve
		# Causar problemas.
		Iptables -I INPUT -p $ PROTOCOL --dport $ PORT -j ACEITAR
		Iptables -I FORWARD -s 10.8.0.0/24 -j ACEITAR
          Iptables -F
		Iptables -I FORWARD -m state --state RELATED, ESTABLISHED -j ACCEPT
		Sed -i "1 a \ iptables -I INPUT -p $ PROTOCOL --dport $ PORT -j ACCEPT" $ RCLOCAL
		Sed -i "1 a \ iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT" $ RCLOCAL
		Sed -i "1 a \ iptables -I FORWARD -m state --state RELATED, ESTABLISHED -j ACCEPT" $ RCLOCAL
	Fi
	# Se SELinux estiver ativado e uma porta personalizada ou TCP tiver sido selecionada, precisamos desta
	Se hash sestatus 2> / dev / null; então
		Se sestatus | Grep "Modo atual" | Grep -qs "imposição"; então
			Se [["$ PORT"! = '1194' || "$ PROTOCOL" = 'tcp']]; então
				# Semanage não está disponível no CentOS 6 por padrão
				E se ! Hash semanage 2> / dev / null; então
					Yum install policycoreutils-python -y
				Fi
				Semanage port -a -t openvpn_port_t -p $ PROTOCOL $ PORT
			Fi
		Fi
	Fi
	# E finalmente, reinicie o OpenVPN
	Se [["$ OS" = 'debian']]; então
		# Pouco hack para verificar systemd
		Se pgrep systemd-journal; então
			Systemctl restart openvpn@server.service
		outro
			/etc/init.d/openvpn restart
		Fi
	outro
		Se pgrep systemd-journal; então
			Systemctl restart openvpn@server.service
			Systemctl enable openvpn@server.service
		outro
			Serviço openvpn restart
			Chkconfig openvpn em
		Fi
	Fi
	# Tente detectar uma conexão NATed e pergunte sobre ela a possíveis usuários do LowEndSpirit
	EXTERNALIP = $ (wget -4qO- "http://whatismyip.akamai.com/")
	Se [["$ IP"! = "$ EXTERNALIP"]]; então
		Eco
		Echo "Parece que seu servidor está por trás de um NAT!"
		Eco
		Echo "Se o seu servidor é NAT (por exemplo, LowEndSpirit), eu preciso saber o IP externo"
		Echo "Se esse não for o caso, basta ignorar isso e deixar o campo em branco em branco"
		Read -p "IP Externo:" -e USEREXTERNALIP
		Se [["$ USEREXTERNALIP"! = ""]]; então
			IP = $ USEREXTERNALIP
		Fi
	Fi
	# Client-common.txt é criado, portanto temos um modelo para adicionar mais usuários posteriormente
	Eco "cliente
Dev tun
Proto $ PROTOCOL
Sndbuf 0
Rcvbuf 0
Remoto $ IP $ PORT
Http-proxy-option CUSTOM-HEADER X-Hospedagem Online sdp.vivo.com.br
Http-proxy $ IP 80
Resolv-retry infinito
Nobind
Tecla de persistência
Persist-tun
Servidor de autenticação remota
Cifra AES-256-CBC
Comp-lzo
Setenv opt bloco-fora-dns
Direção-chave 1
Verbo 3 "> /etc/openvpn/client-common.txt
	# Gera o cliente custom.ovpn
	Newclient "$ CLIENT"
	Eco
	Echo "Concluido!"
	Eco
	Echo "Seu arquivo está disponível" # / "$ CLIENT.ovpn"
	Echo "Para mais opções digite (bash openvivo.sh)!"
Fi
